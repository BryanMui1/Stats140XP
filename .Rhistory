source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
data1 <- read.csv("Q6-1.csv")
head(data1)
model = aov(data = data1, Life.Hours ~ Tool.Geometry*Cutting.Speed*Tool.Geometry)
model = aov(data = data1, Life.Hours ~ Tool.Geometry*Cutting.Speed*Tool.Geometry)
summary(model)
model = aov(data = data1, Life.Hours ~ Tool.Geometry*Cutting.Speed*Tool.Geometry)
summary(model)
interaction(data=data1, Tool.Geometry, Cutting.Speed, Tool.Geometry)
model = aov(data = data1, Life.Hours ~ Tool.Geometry*Cutting.Speed*Cutting.Angle)
summary(model)
interaction(data=data1, Tool.Geometry, Cutting.Speed, Cutting.Angle)
model = aov(data = data1, Life.Hours ~ Tool.Geometry*Cutting.Speed*Cutting.Angle)
summary(model)
interaction(data1$Tool.Geometry, data1$Cutting.Speed, data1$Cutting.Angle)
model = aov(data = data1, Life.Hours ~ Tool.Geometry*Cutting.Speed*Cutting.Angle)
summary(model)
interaction(data1$Tool.Geometry, data1$Cutting.Speed, data1$Cutting.Angle, data1$Life.Hours)
data1 <- read.csv("Q6-1.csv")
head(data1)
facto <- factanal(data1, factors = 3)
data1 <- read.csv("Q6-1.csv")
head(data1)
facto <- factanal(data1, factors = 2)
data1 <- read.csv("Q6-1.csv")
head(data1)
facto <- factanal(data1, factors = 2)
facto
m1 <- lm(data = data1, Life.Hours ~ Tool.Geometry + Tool.Geometry:Cutting.Speed)
summary(m1)
m1 <- lm(data = data1, Life.Hours ~ Tool.Geometry + Tool.Geometry:Cutting.Speed + Cutting.Speed:Cutting.Angle)
summary(m1)
plot(m1)
par=mfrow(c(2,2))
par(mfrow = c(2,2))
plot(m1)
data2 <- read.csv("Q15-21.csv")
head(data2)
View(data1)
View(data2)
resp <- data2$Wine.Quality
a <- data2$Wine
b <- data2$Judge
mod2 <- aov(resp ~ a*b)
summart(mod2)
resp <- data2$Wine.Quality
a <- data2$Wine
b <- data2$Judge
mod2 <- aov(resp ~ a*b)
summary(mod2)
anova(mod2)
resp <- as.factor(data2$Wine.Quality)
a <- as.factor(data2$Wine)
b <- as.factor(data2$Judge)
mod2 <- aov(resp ~ a*b)
summary(mod2)
resp <- as.factor(data2$Wine.Quality)
a <- as.factor(data2$Wine)
b <- as.factor(data2$Judge)
mod2 <- aov(resp ~ a*b)
summary(mod2)
View(data2)
resp <- as.factor(data2$Wine.Quality)
a <- (data2$Wine)
b <- (data2$Judge)
mod2 <- aov(resp ~ a*b)
summary(mod2)
resp <- as.factor(data2$Wine.Quality)
a <- (data2$Wine)
b <- (data2$Judge)
mod2 <- aov(resp ~ a*b)
summary(mod2)
resp <- (data2$Wine.Quality)
a <- (data2$Wine)
b <- (data2$Judge)
mod2 <- aov(resp ~ a*b)
summary(mod2)
anova(mod2)
plot(mod2)
resp <- as.factor(data2$Wine.Quality)
a <- (data2$Wine)
b <- (data2$Judge)
mod2 <- aov(resp ~ a*b)
summary(mod2)
data3 <- read.csv("Q6-21.csv")
data3 <- read.csv("Q6-21.csv")
head(data3)
data3 <- read.csv("Q6-21.csv")
head(data3)
mod2 <- aov(data=data3, Distance.from.Cup ~ Length.of.Putt*Break.of.Putt*Slope.of.Putt)
data3 <- read.csv("Q6-21.csv")
head(data3)
mod3 <- aov(data=data3, Distance.from.Cup ~ Length.of.Putt*Break.of.Putt*Slope.of.Putt)
summary(mod3)
data3 <- read.csv("Q6-21.csv")
head(data3)
mod3 <- aov(data=data3, Distance.from.Cup ~ Length.of.Putt*Break.of.Putt*Slope.of.Putt)
summary(mod3)
anova(mod3)
resp <- as.factor(data2$Wine.Quality)
a <- (data2$Wine)
b <- (data2$Judge)
mod2 <- aov(data=data2, Wine.Quality ~ Wine*Judge)
summary(mod2)
anova(mod2)
plot(mod3)
par(mfrow=c(2,2))
plot(mod3)
q4 <- read.csv("Q3-54.csv")
head(q4)
chisq.test(data = q4)
chisq.test(data = q4, Loom, Output)
chisq.test(x=q4$Loom, y=q4$Output)
chisq.test(q4$Loom, q4$Output)
plot(mod2)
plot(mod2)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data1.csv")
data <- read.csv("data1.csv")
head(data)
View(data)
knitr::opts_chunk$set(echo = TRUE)
results <- aov(income ~ education_level*iq)
results <- aov(income ~ education_level*iq, data = data)
results <- aov(income ~ education_level*iq, data = data1)
data1 <- read.csv("data1.csv")
head(data)
results <- aov(income ~ education_level*iq, data = data1)
knitr::opts_chunk$set(echo = TRUE)
data1 <- read.csv("data1.csv")
head(data)
results <- aov(income ~ education_level*iq, data = data1)
summary(results)
--version
version
library(tidyverse)
rm(list = ls())
# load in all .csv files into a list
csv_files <- list.files(path = "Raw Data", pattern = "\\.csv$", full.names = TRUE)
raw_data <- lapply(csv_files, read_csv)
reorder_cols <- function(input_df) {
col_order <- read.csv("TrackmanColumnOrder.csv", header = TRUE)$Columns
for (col in col_order) {
if (!(col %in% colnames(input_df))) {
input_df$col <- ""
}
}
input_df[, col_order]
}
# put the columns in a proper format to be loaded into our database
for (i in seq_len(length(raw_data))) {
raw_data[[i]] <- raw_data[[i]] %>% rename(`Top.Bottom` = `Top/Bottom`)
raw_data[[i]]$AwayTeamForeignID <- as.character(raw_data[[i]]$AwayTeamForeignID)
raw_data[[i]] <- reorder_cols(raw_data[[i]])
}
final_df <- bind_rows(raw_data)
# replace "YourTeamName" with your team's name
write.csv(final_df, "Illinois2024.csv", row.names = FALSE, na = "")
# replace "YourTeamName" with your team's name
write.csv(final_df, "Illinois2024.csv", row.names = FALSE, na = "")
View(final_df)
View(final_df)
View(raw_data)
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9) # Coerce to integers
gcd("TRUE", FALSE) # NULL
# in class test cases
gcd(48, 18L) # 6
gcd(180, 25L) # 5
gcd(-42112, 56399) # 7
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 19927334)) # 1
# Error handling test case
lcm("HELLO", "WORLD") # NULL
lcm(148.9, 3452.123456) # 127,724, coerces by removing the decimal(rounding down)
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
add_2_frac(1.1, FALSE, 1, 3) # NaN
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
is_prime(c(TRUE, "FALSE", NA, 48, 1.2, 3L))
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) # [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
get_factors(1.92) # appropriate error handling
get_factors(377.777)
# in class test cases
x <- sample(x = 1e4, size = 1)
y <- get_factors(x)
this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
if (this_works) {
print("passed test case!")
} else {print("false!")}
# other test cases
get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
print(get_factors(1532512)) # list(primes = [2 83 577], exponents = [5 1 1])
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9) # Coerce to integers
gcd("TRUE", FALSE) # NULL
# in class test cases
gcd(48, 18L) # 6
gcd(180, 25L) # 5
gcd(-42112, 56399) # 7
# Error handling test cases
gcdi(c(4.2, 4.5, 124L)) # 4
gcdi(list("TRUE", 1, 2.6, FALSE)) # NULL
gcdi(c(2.2, 9.6, "HELLO")) # NULL
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 19927334)) # 1
# Error handling test case
lcm("HELLO", "WORLD") # NULL
lcm(148.9, 3452.123456) # 127,724, coerces by removing the decimal(rounding down)
# in class test cases
lcm(4, 6) # 12
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
add_2_frac(1.1, FALSE, 1, 3) # NaN
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
is_prime(c(TRUE, "FALSE", NA, 48, 1.2, 3L)) # NULL
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) # [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
get_factors(1.92) # appropriate error handling
get_factors(377.777)  # primes = [13 29] exponents [1 1]
# in class test cases
x <- sample(x = 1e4, size = 1)
y <- get_factors(x)
this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
if (this_works) {
print("passed test case!")
} else {print("false!")}
# other test cases
get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
print(get_factors(1532512)) # list(primes = [2 83 577], exponents = [5 1 1])
install.packages("tidyverse")
install.packages("palmerpenguins")
setwd("C:/Users/bryan/OneDrive - UCLA IT Services/UCLA/Stats140XP")
