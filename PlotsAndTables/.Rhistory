gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
# is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599))
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
# is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599))
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
# is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599))
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
# is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
# is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
# is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) # [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
# Error handling test case
# get_factors(1.92) # appropriate error handling
# # in class test cases
# get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
# x <- sample(x = 1e4, size = 1)
# y <- get_factors(x)
# this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
# if (this_works) {
#   print("passed test case!")
# } else {print("false!")}
#
#
# print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) # [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# in class test cases
get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
x <- sample(x = 1e4, size = 1)
y <- get_factors(x)
this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
if (this_works) {
print("passed test case!")
} else {print("false!")}
print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) # [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# in class test cases
get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
x <- sample(x = 1e4, size = 1)
y <- get_factors(x)
this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
if (this_works) {
print("passed test case!")
} else {print("false!")}
print(get_factors(1532512))
knitr::opts_chunk$set(echo = TRUE)
source("./506021334_stats102a_hw1.R")
# Error handling test case
gcd(12.2, 14.9)
gcd(TRUE, FALSE)
# in class test cases
print(gcd(48, 18L)) # answer: 6
print(gcd(180, 25L)) # answer: 5
# Error handling test cases
gcdi(c(4.2, 4.5, 124L))
gcdi(list("TRUE", 1, 2.6, FALSE))
gcdi(c(2.2, 9.6, "HELLO"))
# in class test cases
gcdi(c(16, 32, -58)) # 2
gcdi(c(4789, 6123, 199)) # 1
# Error handling test case
#lcm("HELLO", "WORLD")
# in class test cases
lcm(4, 6)
lcm(123, 4920) # 14760
lcm(8675309, 9876543) # ~8.5682062377 * 10^13
# Error handling test case
# in class test cases
add_2_frac(1, 2, 1, 3) # 5/6
add_2_frac(1, 11, 1, 5) # list(num = 16, denom = 55)
add_2_frac(1, 11, -1, 5) # list(num = -6, denom = 55)
add_2_frac(2468, 3579, 1357, 2468) # 10947727 / 8832972
# Error handling test case
# in class test cases
is_prime(c(9, 7)) # [False True]
is_prime(c(1, 3, 5)) # [FALSE TRUE TRUE]
is_prime(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # [FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE]
is_prime(c(29, 97, 143, 169, 221, 323, 377, 493, 541, 599)) # [TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE]
# Error handling test case
# get_factors(1.92) # appropriate error handling
# in class test cases
get_factors(1920) # list(primes = [2 3 5], exponents = [7 1 1])
x <- sample(x = 1e4, size = 1)
y <- get_factors(x)
this_works <- prod(y$primes^y$exponents) == x & all(is_prime(y$primes))
if (this_works) {
print("passed test case!")
} else {print("false!")}
print(get_factors(1532512))
setwd("~/School")
setwd("~/School/Stats140XP/PlotsAndTables")
knitr::opts_chunk$set(echo = TRUE)
# import libraries:
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# import libraries:
library(tidyverse)
library(ggplot2)
library(sf)
# read EV data:
EV_data <- read_csv("_data/EV2025_01.csv", show_col_types = FALSE)
# read county demographics data
county_demog <- read_csv("_data/county_demog.csv", show_col_types = FALSE)
county_demog <- county_demog %>% mutate(total_pop = Pop_18_24 + Pop_25_over)
# read geo data
geo_basemap <- st_read("_data/wa_counties.geojson")
geo_basemap <- geo_basemap %>%
mutate(JURISDICT_NM = gsub(" County$", "", JURISDICT_NM)) %>%
rename(County = JURISDICT_NM)
# merge demographics data and geographic data
merged_data <- geo_basemap %>% left_join(county_demog, by = "County")
# find number of EVs per county:
EV_per_county <- EV_data %>%
group_by(County) %>%            # Group the data by County
summarise(EV_count = n()) %>%   # Count the number of rows for each county
arrange(desc(EV_count)) %>%
filter(County %in% geo_basemap$County)
merged_data <- merged_data %>%
left_join(EV_per_county, by = "County") %>%
mutate(EV_per_person = EV_count / total_pop) %>%
arrange(EV_per_person)
# plot EVs per person ratio for each county:
ggplot(data = merged_data, mapping = aes(x = reorder(County, -EV_per_person), y = EV_per_person)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Electric Vehicles per person by County in Washington",
x = "County",
y = "EVs per person"
)
# create a heatmap of the same thing:
ggplot(data = merged_data) +
geom_sf(aes(fill = EV_per_person), color = "white") +  # Fill counties by EV_per_person
scale_fill_viridis_c(option = "plasma", name = "EVs per Person") +  # Use viridis color scale
labs(
title = "Heatmap of EVs per Person by County",
subtitle = "Electric Vehicles per Person Across Washington State",
caption = "Data Source: EV_data and county_demog"
)
View(EV_data)
View(EV_per_county)
View(merged_data)
View(county_demog)
